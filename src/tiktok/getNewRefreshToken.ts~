import { REFRESH_TOKEN_URL } from './endpoints';
import { RefreshToken } from '../datastore/types/main';
import { MockData } from '../datastore/mock_data/main';

const mRefreshToken: RefreshToken = new MockData().rt;

export const getNewRefreshToken = async (refresh_token: string): Promise<RefreshToken> => {
    if (process.env.NODE_ENV === 'dev') {
        return mRefreshToken;
    }

    const client_id: string  = process.env.TIKTOK_CLIENT_ID;
    const client_secret: string = process.env.TIKTOK_CLIENT_SECRET;
    const grant_type: string = 'refresh_token';

    const body = {
        client_id,
        client_secret,
        grant_type,
        refresh_token,
    };

    const res = await fetch(REFRESH_TOKEN_URL,
        {
            body: JSON.stringify(body),
            method: 'post',
            headers: {
                'Content-Type': 'application/json',
            },
        }
    );

    if (res.status !== 200) {
        console.log("There was an issue requesting a new access token");
        throw new Error(`Request for a new access token return a ${res.status} status`); 
    }

    // We expect the response from the TikTok API to match our AccessToken Interface
    // based on the TikTok API documentation
    const newRefreshToken: any = await res.json();

    console.log('new refresh token');
    console.log(newRefreshToken);

    return {
        token: newRefreshToken?.data?.refresh_token,
        expire_time: Date.now() + newRefreshToken?.data?.expires_in,
        create_time: Date.now(),
    }
};
